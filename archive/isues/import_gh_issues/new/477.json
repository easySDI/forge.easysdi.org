{
    "issue": {
        "closed": false,
        "title": "CSW connector refactoring",
        "created_at": "2011-09-12T09:34:39Z",
        "labels": [
            "Feature",
            "Redmine status : New",
            "Category : PROXY"
        ],
        "body": "**Original author :** M\u00e9rour Xavier\n\nA WMS connector was refactored in PROXY 2.2.0 (http:\/\/forge.easysdi.org\/projects\/proxy\/versions\/80).\r\n\r\nCSW connector should be refactored as well."
    },
    "comments": [
        {
            "body": "**Original author :** M\u00e9rour Xavier\n\nQuestion : can we expect a performance improvement in handing CSW requests with the refactoring ?\r\n\r\nThanks H\u00e9l\u00e8ne for your answer.",
            "created_at": "2011-09-12T09:44:31Z"
        },
        {
            "body": "**Original author :** M\u00e9rour Xavier\n\nH\u00e9l\u00e8ne, \r\n\r\nDo you have any input on my previous question ?\r\n(need to know it for a meeting tomorrow).\r\n\r\nThanks",
            "created_at": "2011-11-14T15:57:19Z"
        },
        {
            "body": "**Original author :** M\u00e9rour Xavier\n\nPlease H\u00e9l\u00e8ne :-)",
            "created_at": "2011-11-18T15:35:11Z"
        },
        {
            "body": "**Original author :** Van Hoecke H\u00e9l\u00e8ne \n\nRefactoring CSW connector will not lead to a major performance improvement.\r\n\r\nThe only process that will be improve by the refactoring is the response rewriting, by using JDOM in place of XSL transformation. Time will be save on this, but this is not the most time consumer process in the CSW connector.\r\n\r\nand sorry for the delay...\r\n",
            "created_at": "2011-11-18T15:45:57Z"
        },
        {
            "body": "**Original author :** M\u00e9rour Xavier\n\nThanks H\u00e9l\u00e8ne for your answer.\r\n\r\nWhat is the most time consuming process then ?",
            "created_at": "2011-11-18T15:49:15Z"
        },
        {
            "body": "**Original author :** Van Hoecke H\u00e9l\u00e8ne \n\nFor a GetRecords request, it's the construction of the filter for the authorized metadatas.\r\n\r\nFor GetCapabilities and GetRecordById, there is no really time consuming process, so refactoring can give improvement.\r\n\r\n(my previous answer was not really clear and right, i just thought to GetRecords)",
            "created_at": "2011-11-18T16:06:13Z"
        },
        {
            "body": "**Original author :** M\u00e9rour Xavier\n\nOK, so if we want some performance improvement on CSW, we should work on the GetRecord requests processing, right ?\r\n\r\n",
            "created_at": "2011-11-21T07:30:25Z"
        },
        {
            "body": "**Original author :** Magoni Bruno\n\nJust let me snake here ;-)\r\n\r\nI guess that working only on GetRecords request to improve performance is not sufficient...\r\nFor now CSW connector is not refactored and it will be more unconvenient to upgrade small part of it instead of reengineering it's full code.\r\nWhen refactoring, we will gain access to stability and clarity of already refactored PROXY common code (done with WMS and WMTS).\r\n\r\nIn my opinion, it's important using JDOM instead of XSL transformation for performance but also for stability and maintenance stuff!\r\nBringing coherent source code to Community is very important for new developers who want\/need to add feature or fix bug.\r\n\r\nIn this way, WFS will be the last connector to be refactored.\r\n\r\nWe must keep in mind that building filter will be not necessary anymore in the future (short or middle time, I still don't know) as EasySDI properties won't be stored into MySQL database but inside metadata content. So playing with filters will be thrown away...\r\n\r\n",
            "created_at": "2011-11-28T16:37:53Z"
        },
        {
            "body": "**Original author :** M\u00e9rour Xavier\n\nIf XSLT is widely used in current CSW connector, according to what you said Bruno, it's still relevant to work on CSW refactoring to move from XSLT to JDOM I guess.\n\nI am just not sure to see exactly the gain moving to JDOM when talking - strictly - about performance.",
            "created_at": "2011-11-28T16:53:16Z"
        },
        {
            "body": "**Original author :** Magoni Bruno\n\nBefore refactoring, PROXY was building dynamically the XSL file to finally apply it on XML content sended back by distant OGC service.\r\nAfter refactoring, PROXY is directly manipulating XML content with JDOM API. This way to do is much more convenient for manipulating XML node (source code is more readable and it's very time saver when adding new XML node transformation) and offers much performance during XSL transformation (JDOM manipualtion is faster than XSL transformation and we don't need anymore to prebuild dynamically an XSL content).\r\n\r\nHope it helps understanding the difference between XSL and JDOM :-)\r\n",
            "created_at": "2011-11-28T17:27:18Z"
        },
        {
            "body": "**Original author :** M\u00e9rour Xavier\n\nYes, it helps a lot !\r\n\r\nThanks.",
            "created_at": "2011-11-29T10:04:40Z"
        }
    ]
}