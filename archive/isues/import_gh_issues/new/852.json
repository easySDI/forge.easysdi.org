{
    "issue": {
        "closed": true,
        "title": "Values containing & are truncated",
        "created_at": "2014-10-31T09:13:10Z",
        "labels": [
            "Defect",
            "Redmine status : Closed",
            "Category : CATALOG"
        ],
        "body": "**Original author :** Portier Thomas\n\nWhen I edit a metadata and I fill a field with a & value, after saving, the value is truncated.\r\n\r\nexemple : \r\nIf I fill : http:\/\/localhost\/geoserver\/wms?service=WMS&request=gestCapabilities\r\nThe value saved is http:\/\/localhost\/geoserver\/wms?service=WMS\r\n\r\nI think I found a solution. In components\\com_easysdi_catalog\\controllers\\metadata.php on line 545\r\n\r\nI replaced $element->nodeValue = $value; by $element->nodeValue = htmlspecialchars($value);\r\n\r\nBefore commiting it, I would like to verify if this is the good way to fix the bug?\r\n\r\nWhat do you think?\n\n**Fixed versions :** 4.2.4"
    },
    "comments": [
        {
            "body": "**Original author :** Magoni Bruno\n\nA better way seems to read carefully PHP doc related to #778 before using encoding\/decoding stuff...",
            "created_at": "2014-11-14T08:44:54Z"
        },
        {
            "body": "**Original author :** Blatti Yves\n\nJust some inputs on this thing:\r\n\r\nA little test I made in the past for #778 (adapted), input is always 'foo&bar'\r\n\r\n```\n\r\n<code class=\"php\">\r\n<?php\r\n\/\/doc\r\n$doc  = new DOMDocument('1.0', 'utf-8');\r\n$doc->formatOutput = true;\r\n\/\/root\r\n$root = $doc->createElementNS('http:\/\/da.ns', 'root');\r\n$doc->appendChild($root);\r\n$root->setAttributeNS('http:\/\/www.w3.org\/2000\/xmlns\/' ,'xmlns:demo', 'http:\/\/foo.bar');\r\n\r\n\r\n$root->appendChild($doc->createComment('1) ------- createElementNS with value content : fails'));\r\n$item = $doc->createElementNS('http:\/\/foo.bar', 'demo:creatElement-OneLine', 'foo&bar');\r\n$root->appendChild($item);\r\n\r\n$root->appendChild($doc->createComment('2) ------- createElementNS with value content + htmlspecialchars : pass (Thomas proposal : php level)'));\r\n$item = $doc->createElementNS('http:\/\/foo.bar', 'demo:creatElement-OneLine', htmlspecialchars('foo&bar'));\r\n$root->appendChild($item);\r\n\r\n$root->appendChild($doc->createComment('3) ------- createElementNS then set nodeValue : fails'));\r\n$item2 = $doc->createElementNS('http:\/\/foo.bar', 'demo:creatElement-nodeValue');\r\n$item2->nodeValue = 'foo&bar';\r\n$root->appendChild($item2);\r\n\r\n$root->appendChild($doc->createComment('4) ------- createElementNS with createTextNode : pass (My preference : libXml level)'));\r\n$item3a = $doc->createElementNS('http:\/\/foo.bar', 'demo:creatElement-createTextNode');\r\n$item3b = $doc->createTextNode ('foo&bar');\r\n$item3a->appendChild($item3b);\r\n$root->appendChild($item3a);\r\n\r\n\/\/look pretty in html\r\necho '```\n';\r\necho htmlspecialchars($doc->saveXML());\r\necho '```\n';\r\n?>\r\n\r\n```\n\r\n\r\noutputs:\r\n\r\n```\n\r\n<code class=\"xml\">\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<root xmlns=\"http:\/\/da.ns\" xmlns:demo=\"http:\/\/foo.bar\">\r\n  <!--1) ------- createElementNS with value content : fails-->\r\n  <demo:creatElement-OneLine>foo<\/demo:creatElement-OneLine>\r\n  <!--2) ------- createElementNS with value content + htmlspecialchars : pass (Thomas proposal : php level)-->\r\n  <demo:creatElement-OneLine>foo&amp;bar<\/demo:creatElement-OneLine>\r\n  <!--3) ------- createElementNS then set nodeValue : fails-->\r\n  <demo:creatElement-nodeValue>foo<\/demo:creatElement-nodeValue>\r\n  <!--4) ------- createElementNS with createTextNode : pass (My preference : libXml level)-->\r\n  <demo:creatElement-createTextNode>foo&amp;bar<\/demo:creatElement-createTextNode>\r\n<\/root>\r\n\r\n```\n\r\n\r\nExplanations comes from PHP source code and libXML API:\r\n\r\nPHP's *createTextNode* uses libXML \"xmlNewDocText\":http:\/\/xmlsoft.org\/html\/libxml-tree.html#xmlNewDocNode\r\n(see PHP_FUNCTION(dom_document_create_text_node) \"here\":https:\/\/github.com\/php\/php-src\/blob\/d0cb715373c3fbe9dc095378ec5ed8c71f799f67\/ext\/dom\/document.c#L771)\r\n\r\nbut PHP's *createElementNS* uses libXML \"xmlNewDocNode\":http:\/\/xmlsoft.org\/html\/libxml-tree.html#xmlNewDocNode\r\n(see PHP_FUNCTION(dom_document_create_element_ns) \"here\":https:\/\/github.com\/php\/php-src\/blob\/d0cb715373c3fbe9dc095378ec5ed8c71f799f67\/ext\/dom\/document.c#L1051)\r\nlibXML API specifies :\r\n```\n\r\nCreation of a new node element within a document. @ns and @content are optional (NULL).\r\nNOTE: @content is supposed to be a piece of XML CDATA, so it allow entities references, but XML special chars\r\nneed to be escaped first by using xmlEncodeEntitiesReentrant().[...]\r\n```\n\r\n\r\nSo my personal preference would go to my example N\u00b04 using : createTextNode. But serious doc reading is still necessary ...\r\n\r\nREF: A (rejected) php bug, with some inputs : https:\/\/bugs.php.net\/bug.php?id=31613#1106271770)\r\n\r\n",
            "created_at": "2014-11-14T12:11:40Z"
        },
        {
            "body": "**Original author :** Magoni Bruno\n\nReading doc and to have similar logical with #778 fix, I would suggest to use createTextNode method",
            "created_at": "2014-12-12T17:24:44Z"
        }
    ]
}