{"issue":{"id":1054,"project":{"id":16,"name":"easySDI"},"tracker":{"id":1,"name":"Defect"},"status":{"id":10,"name":"Closed"},"priority":{"id":4,"name":"Normal"},"author":{"id":383,"name":"Blatti Yves"},"category":{"id":20,"name":"SHOP"},"fixed_version":{"id":176,"name":"4.3.2"},"subject":"Allow any property value code (in alias field) + properties + perimeters","description":"In SHOP property values we set codes that are transmitted over WPS/REST service to providers.\r\nIn easySDI V2, that was a distinct field named CODE. In V4 this value is stored in *the alias field*.\r\n\r\n*Problem is* by using the alias field, the values have to be *\"URL safe\"* and *unique*. But:\r\n- On some system the values are predefined (we have upper cases values on some remote systems)\r\n- Values are the same in multiple properties (\"YES\" or \"TRUE\" for example) and they become \"yes-1\" by getting aliased.\r\n\r\nI suggest disabling this mechanism by overriding the @check()@ function to avoid altering @alias@ in @Easysdi_shopTablepropertyvalue@ class.\r\nSince theses aliases are never used in frontend they don't have to be unique nor URL safe.\r\n\r\nSample code :\r\n<pre>\r\n<code class=\"php\">\r\n    public function check() {\r\n        $fields = $this->getFields();\r\n        //If there is an ordering column and this is a new row then get the next ordering value\r\n        if (property_exists($this, 'ordering') && $this->id == 0) {\r\n            $this->ordering = $this->getNextOrder();\r\n        }\r\n        //Do not call parent check to avoid alias alteration\r\n        return true;\r\n    }\r\n</code>\r\n</pre>\r\n\r\n*Is it OK for TC if I correct this* in the proposed way?\r\nThank for your responses. ","start_date":"2015-07-03","done_ratio":100,"custom_fields":[{"id":2,"name":"Affected version","value":"138"}],"created_on":"2015-07-03T08:40:20Z","updated_on":"2015-09-18T15:21:01Z","closed_on":"2015-07-10T14:00:47Z","journals":[{"id":5734,"user":{"id":383,"name":"Blatti Yves"},"notes":"Same applies to perimeters and properties alias !","created_on":"2015-07-03T09:25:46Z","details":[{"property":"attr","name":"subject","old_value":"Allow any property value code (in alias field)","new_value":"Allow any property value code (in alias field) + properties + perimeters"}]},{"id":5759,"user":{"id":23,"name":"Van Hoecke H\u00e9l\u00e8ne "},"notes":"It's OK with me.","created_on":"2015-07-10T08:14:26Z","details":[]},{"id":5760,"user":{"id":787,"name":"Villemagne J\u00e9r\u00f4me"},"notes":"+1","created_on":"2015-07-10T08:16:29Z","details":[]},{"id":5761,"user":{"id":383,"name":"Blatti Yves"},"notes":"Thanks for your votes","created_on":"2015-07-10T08:51:15Z","details":[{"property":"attr","name":"status_id","old_value":"2","new_value":"3"},{"property":"attr","name":"done_ratio","old_value":"0","new_value":"100"}]},{"id":5762,"user":{"id":383,"name":"Blatti Yves"},"notes":"In my branch rev: 8824","created_on":"2015-07-10T08:51:53Z","details":[{"property":"attr","name":"status_id","old_value":"3","new_value":"12"},{"property":"attr","name":"assigned_to_id","old_value":"762","new_value":"837"},{"property":"attr","name":"priority_id","old_value":"6","new_value":"4"}]},{"id":5763,"user":{"id":23,"name":"Van Hoecke H\u00e9l\u00e8ne "},"created_on":"2015-07-10T14:00:47Z","details":[{"property":"attr","name":"status_id","old_value":"12","new_value":"10"}]},{"id":5766,"user":{"id":23,"name":"Van Hoecke H\u00e9l\u00e8ne "},"notes":"","created_on":"2015-07-10T14:02:21Z","details":[{"property":"attr","name":"fixed_version_id","new_value":"176"}]},{"id":5768,"user":{"id":23,"name":"Van Hoecke H\u00e9l\u00e8ne "},"created_on":"2015-07-10T14:02:35Z","details":[{"property":"attr","name":"assigned_to_id","old_value":"837"}]}]}}